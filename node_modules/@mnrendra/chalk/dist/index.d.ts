import { ColorInfo, ColorSupportLevel } from '@mnrendra/chalk-supports-color';
export { ColorInfo, ColorSupport, ColorSupportLevel } from '@mnrendra/chalk-supports-color';
import { ModifierName, ForegroundColorName, BackgroundColorName, ColorName } from '@mnrendra/chalk-ansi-styles';
export { BackgroundColorName, ColorName, ForegroundColorName, ModifierName, backgroundColorNames, colorNames, foregroundColorNames, modifierNames } from '@mnrendra/chalk-ansi-styles';

declare const supportsColor: ColorInfo;
declare const supportsColorStderr: ColorInfo;

interface Options {
    /**
     * Specify the color support for Chalk.
     *
     * By default, color support is automatically detected based on the
     * environment.
     *
     * Levels:
     * - `0` - All colors disabled.
     * - `1` - Basic 16 colors support.
     * - `2` - ANSI 256 colors support.
     * - `3` - Truecolor 16 million colors support.
     */
    readonly level?: ColorSupportLevel;
}

interface ChalkInstance {
    (...text: unknown[]): string;
    /**
     * The color support for Chalk.
     *
     * By default, color support is automatically detected based on the
     * environment.
     *
     * Levels:
     * - `0` - All colors disabled.
     * - `1` - Basic 16 colors support.
     * - `2` - ANSI 256 colors support.
     * - `3` - Truecolor 16 million colors support.
     */
    level: ColorSupportLevel;
    /**
     * Use RGB values to set text color.
     *
     * @example
     * ```
     * import chalk from 'chalk';
     *
     * chalk.rgb(222, 173, 237);
     * ```
     */
    rgb: (red: number, green: number, blue: number) => this;
    /**
     * Use HEX value to set text color.
     *
     * @param color - Hexadecimal value representing the desired color.
     *
     * @example
     * ```
     * import chalk from 'chalk';
     *
     * chalk.hex('#DEADED');
     * ```
     */
    hex: (color: string) => this;
    /**
     * Use an [8-bit unsigned number](https://en.wikipedia.org/wiki/ANSI_escape_code#8-bit) to set text color.
     *
     * @example
     * ```
     * import chalk from 'chalk';
     *
     * chalk.ansi256(201);
     * ```
     */
    ansi256: (index: number) => this;
    /**
     * Use RGB values to set background color.
     *
     * @example
     * ```
     * import chalk from 'chalk';
     *
     * chalk.bgRgb(222, 173, 237);
     * ```
     */
    bgRgb: (red: number, green: number, blue: number) => this;
    /**
     * Use HEX value to set background color.
     *
     * @param color - Hexadecimal value representing the desired color.
     *
     * @example
     * ```
     * import chalk from 'chalk';
     *
     * chalk.bgHex('#DEADED');
     * ```
     */
    bgHex: (color: string) => this;
    /**
     * Use a [8-bit unsigned number](https://en.wikipedia.org/wiki/ANSI_escape_code#8-bit) to set background color.
     *
     * @example
     * ```
     * import chalk from 'chalk';
     *
     * chalk.bgAnsi256(201);
     * ```
     */
    bgAnsi256: (index: number) => this;
    /**
     * Modifier: Reset the current style.
     */
    readonly reset: this;
    /**
     * Modifier: Make the text bold.
     */
    readonly bold: this;
    /**
     * Modifier: Make the text have lower opacity.
     */
    readonly dim: this;
    /**
     * Modifier: Make the text italic. *(Not widely supported)*
     */
    readonly italic: this;
    /**
     * Modifier: Put a horizontal line below the text. *(Not widely supported)*
     */
    readonly underline: this;
    /**
     * Modifier: Invert background and foreground colors.
     */
    readonly inverse: this;
    /**
     * Modifier: Print the text but make it invisible.
     */
    readonly hidden: this;
    /**
     * Modifier: Puts a horizontal line through the center of the text. *(Not
     * widely supported)*
     */
    readonly strikethrough: this;
    /**
     * Modifier: Put a horizontal line above the text. *(Not widely supported)*
     */
    readonly overline: this;
    /**
     * Modifier: Print the text only when Chalk has a color level above zero.
     *
     * Can be useful for things that are purely cosmetic.
     */
    readonly visible: this;
    readonly black: this;
    readonly red: this;
    readonly green: this;
    readonly yellow: this;
    readonly blue: this;
    readonly magenta: this;
    readonly cyan: this;
    readonly white: this;
    /**
     * Alias for `blackBright`.
     */
    readonly gray: this;
    /**
     * Alias for `blackBright`.
     */
    readonly grey: this;
    readonly blackBright: this;
    readonly redBright: this;
    readonly greenBright: this;
    readonly yellowBright: this;
    readonly blueBright: this;
    readonly magentaBright: this;
    readonly cyanBright: this;
    readonly whiteBright: this;
    readonly bgBlack: this;
    readonly bgRed: this;
    readonly bgGreen: this;
    readonly bgYellow: this;
    readonly bgBlue: this;
    readonly bgMagenta: this;
    readonly bgCyan: this;
    readonly bgWhite: this;
    /**
     * Alias for `bgBlackBright`.
     */
    readonly bgGray: this;
    /**
     * Alias for `bgBlackBright`.
     */
    readonly bgGrey: this;
    readonly bgBlackBright: this;
    readonly bgRedBright: this;
    readonly bgGreenBright: this;
    readonly bgYellowBright: this;
    readonly bgBlueBright: this;
    readonly bgMagentaBright: this;
    readonly bgCyanBright: this;
    readonly bgWhiteBright: this;
}

declare function Chalk(options?: Options): ChalkInstance;
declare const chalk: ChalkInstance;
declare const chalkStderr: ChalkInstance;
declare const reset: ChalkInstance;
declare const bold: ChalkInstance;
declare const dim: ChalkInstance;
declare const italic: ChalkInstance;
declare const underline: ChalkInstance;
declare const inverse: ChalkInstance;
declare const hidden: ChalkInstance;
declare const strikethrough: ChalkInstance;
declare const overline: ChalkInstance;
declare const black: ChalkInstance;
declare const red: ChalkInstance;
declare const green: ChalkInstance;
declare const yellow: ChalkInstance;
declare const blue: ChalkInstance;
declare const magenta: ChalkInstance;
declare const cyan: ChalkInstance;
declare const white: ChalkInstance;
declare const gray: ChalkInstance;
declare const grey: ChalkInstance;
declare const blackBright: ChalkInstance;
declare const redBright: ChalkInstance;
declare const greenBright: ChalkInstance;
declare const yellowBright: ChalkInstance;
declare const blueBright: ChalkInstance;
declare const magentaBright: ChalkInstance;
declare const cyanBright: ChalkInstance;
declare const whiteBright: ChalkInstance;
declare const bgBlack: ChalkInstance;
declare const bgRed: ChalkInstance;
declare const bgGreen: ChalkInstance;
declare const bgYellow: ChalkInstance;
declare const bgBlue: ChalkInstance;
declare const bgMagenta: ChalkInstance;
declare const bgCyan: ChalkInstance;
declare const bgWhite: ChalkInstance;
declare const bgGray: ChalkInstance;
declare const bgGrey: ChalkInstance;
declare const bgBlackBright: ChalkInstance;
declare const bgRedBright: ChalkInstance;
declare const bgGreenBright: ChalkInstance;
declare const bgYellowBright: ChalkInstance;
declare const bgBlueBright: ChalkInstance;
declare const bgMagentaBright: ChalkInstance;
declare const bgCyanBright: ChalkInstance;
declare const bgWhiteBright: ChalkInstance;
declare const visible: ChalkInstance;
declare const hex: (color: string) => ChalkInstance;
declare const rgb: (red: number, green: number, blue: number) => ChalkInstance;
declare const ansi256: (index: number) => ChalkInstance;
declare const bgHex: (color: string) => ChalkInstance;
declare const bgRgb: (red: number, green: number, blue: number) => ChalkInstance;
declare const bgAnsi256: (index: number) => ChalkInstance;

/**
 * @deprecated Use `ModifierName` instead.
 *
 * Basic modifier names.
 */
type Modifiers = ModifierName;
/**
 * @deprecated Use `ForegroundColorName` instead.
 *
 * Basic foreground color names.
 *
 * [More colors here.](https://github.com/chalk/chalk/blob/main/readme.md#256-and-truecolor-color-support)
 */
type ForegroundColor = ForegroundColorName;
/**
 * @deprecated Use `BackgroundColorName` instead.
 *
 * Basic background color names.
 *
 * [More colors here.](https://github.com/chalk/chalk/blob/main/readme.md#256-and-truecolor-color-support)
 */
type BackgroundColor = BackgroundColorName;
/**
 * @deprecated Use `ColorName` instead.
 *
 * Basic color names. The combination of `foreground` and `background` color
 * names.
 *
 * [More colors here.](https://github.com/chalk/chalk/blob/main/readme.md#256-and-truecolor-color-support)
 */
type Color = ColorName;
/**
 * @deprecated Use `modifierNames` instead.
 *
 * Basic modifier names.
 */
declare const modifiers: readonly ("reset" | "bold" | "dim" | "italic" | "underline" | "inverse" | "hidden" | "strikethrough" | "overline")[];
/**
 * @deprecated Use `foregroundColorNames` instead.
 *
 * Basic foreground color names.
 */
declare const foregroundColors: readonly ("black" | "red" | "green" | "yellow" | "blue" | "magenta" | "cyan" | "white" | "gray" | "grey" | "blackBright" | "redBright" | "greenBright" | "yellowBright" | "blueBright" | "magentaBright" | "cyanBright" | "whiteBright")[];
/**
 * @deprecated Use `backgroundColorNames` instead.
 *
 * Basic background color names.
 */
declare const backgroundColors: readonly ("bgBlack" | "bgRed" | "bgGreen" | "bgYellow" | "bgBlue" | "bgMagenta" | "bgCyan" | "bgWhite" | "bgGray" | "bgGrey" | "bgBlackBright" | "bgRedBright" | "bgGreenBright" | "bgYellowBright" | "bgBlueBright" | "bgMagentaBright" | "bgCyanBright" | "bgWhiteBright")[];
/**
 * @deprecated Use `colorNames` instead.
 *
 * Basic color names. The combination of `foreground` and `background` color
 * names.
 */
declare const colors: readonly ColorName[];

export { type BackgroundColor, Chalk, type ChalkInstance, type Color, type ForegroundColor, type Modifiers, type Options, ansi256, backgroundColors, bgAnsi256, bgBlack, bgBlackBright, bgBlue, bgBlueBright, bgCyan, bgCyanBright, bgGray, bgGreen, bgGreenBright, bgGrey, bgHex, bgMagenta, bgMagentaBright, bgRed, bgRedBright, bgRgb, bgWhite, bgWhiteBright, bgYellow, bgYellowBright, black, blackBright, blue, blueBright, bold, chalk, chalkStderr, colors, cyan, cyanBright, chalk as default, dim, foregroundColors, gray, green, greenBright, grey, hex, hidden, inverse, italic, magenta, magentaBright, modifiers, overline, red, redBright, reset, rgb, strikethrough, supportsColor, supportsColorStderr, underline, visible, white, whiteBright, yellow, yellowBright };
//# sourceMappingURL=index.d.ts.map
