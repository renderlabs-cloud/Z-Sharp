declare const _default: "// clang-format off\n#pragma section legal\n/**\n * ! READ THIS !\n *\n * # Legal statements\n *\n * This code was generated by the Z# programming system. \uD83E\uDECE \u2764\uFE0F\n *\n * Z# is an open-source project licensed under the MIT License\n * with the following restriction:\n *\n * - You may use, copy, modify, merge, publish, distribute, and sublicense\n *   this software freely, **but you may NOT sell the original software\n *   or derivative works as standalone products.**\n *\n * - This software is provided \"AS IS\", without warranty of any kind.\n *\n * - The Z# organization, its developers, and contributors disclaim all liability\n *   for any damages arising from the use of this software.\n *\n * - Responsibility for malicious or harmful code lies solely with the author,\n *   not with Z# or its maintainers.\n *\n * Z# is not intended to generate malicious code, but like any tool,\n * it can be misused. Use at your own risk.\n *\n * If you find Z# useful, please consider supporting the project:\n * https://zsharp.dev/donate \u2764\uFE0F\n */\n#pragma section end\n// clang-format off\n\n#define EVAL(x) x\n\n#define HST(x) #x\n\n#define CONCAT_2(a, b) CONCAT_IMPL(a, b)\n#define CONCAT_3(a, b, c) CONCAT_IMPL(a, CONCAT_IMPL(b, c))\n#define CONCAT_4(a, b, c, d) CONCAT_IMPL(CONCAT_IMPL(a, b), CONCAT_IMPL(c, d))\n\n#define CONCAT_IMPL(a, b) a##b\n\n#define __STAR__ *\n// clang-format off\n\n/**\n * # Register usage\n *\n * Z0 - Z4  : Mnemonic control\n * Z5       : Scope\n * Z6       : Selector control\n * Z7       : Parameters\n * Z8       : Control flow\n * Z9       : Stack control\n * Z10 - Z13: Unallocated\n * Z14      : Debugger control\n * Z15      : PC\n */\n\n/* Architecture mapping */\n\n/* x86_64 (64-bit) */\n#if defined(__x86_64__) || defined(__amd64__)\n\t// Registers\n\t#define RAX rax\n\t#define RBX rbx\n\t#define RCX rcx\n\t#define RDX rdx\n\t#define RSI rsi\n\t#define RDI rdi\n\t#define RSP rsp\n\t#define RBP rbp\n\t#define R8  r8\n\t#define R9  r9\n\t#define R10 r10\n\t#define R11 r11\n\t#define R12 r12\n\t#define R13 r13\n\t#define R14 r14\n\t#define R15 r15\n\t#define RIP rip\n\n\t// Mnemonics\n\t#define SYSCALL syscall\n\t#define MOV(x, y) mov x, y\n\t#define LDR(x, y, z) mov x, [y + z]\n\t#define LDL(x, y) mov x, y\n\t#define LEA(x, y, z) lea x, [y + z]\n\t#define XOR(x, y) xor x, y\n\t#define ADD(x, y) add x, y\n\t#define SUB(x, y) sub x, y\n\t#define IMUL(x, y) imul x, y\n\t#define IDIV(x) idiv x\n\t#define INC(x) inc x\n\t#define DEC(x) dec x\n\t#define CMP(x, y) cmp x, y\n\t#define TEST(x, y) test x, y\n\t#define JMP(x) jmp x\n\t#define JE(x) je x\n\t#define JNE(x) jne x\n\t#define JG(x) jg x\n\t#define JL(x) jl x\n\t#define JGE(x) jge x\n\t#define JLE(x) jle x\n\t#define CALL(x) call x\n\t#define RET ret\n\t#define PUSH(x) push x\n\t#define POP(x) pop x\n\t#define NOP nop\n\t#define INT(x) int x\n\n\t// Value\n\t#define REF(x) $x\n\n/* ARM64 (AArch64) */\n#elif defined(__aarch64__)\n\t// Registers\n\t#define RAX x0\n\t#define RBX x1\n\t#define RCX x2\n\t#define RDX x3\n\t#define RSI x4\n\t#define RDI x5\n\t#define RSP sp\n\t#define RBP bp\n\t#define R8  x8\n\t#define R9  x9\n\t#define R10 x10\n\t#define R11 x11\n\t#define R12 x12\n\t#define R13 x13\n\t#define R14 x14\n\t#define R15 x15\n\t#define RIP pc\n\n\t// Mnemonics\n\t#define SYSCALL svc 0\n\t#define MOV(x, y) mov x, y\n\t#define LDR(x, y, z) ldr x, [y, z]\n\t#define LDL(x, y) ldr x, =y\n\t#define LEA(x, y, z) adr x, y\n\t#define XOR(x, y) eor x, x, y\n\t#define ADD(x, y) add x, x, y\n\t#define SUB(x, y) sub x, x, y\n\t#define IMUL(x, y) mul x, x, y\n\t#define IDIV(x, y) sdiv x, x, y\n\t#define INC(x) add x, x, REF(1)\n\t#define DEC(x) sub x, x, REF(1)\n\t#define CMP(x, y) cmp x, y\n\t#define TEST(x, y) ands xzr, x, y\n\t#define JMP(x) b x\n\t#define JE(x) b.eq x\n\t#define JNE(x) b.ne x\n\t#define JG(x) b.gt x\n\t#define JL(x) b.lt x\n\t#define JGE(x) b.ge x\n\t#define JLE(x) b.le x\n\t#define CALL(x) bl x\n\t#define RET ret\n\t#define PUSH(x) str x, [sp, REF(-16)]!\n\t#define POP(x) ldr x, [sp], REF(16)\n\t#define NOP nop\n\t#define INT(x) svc x\n\n\t// Value\n\t#define REF(x) HST(EVAL(x))\n\n#else\n\t#error \"Unsupported architecture for register mapping\"\n#endif\n\n/* Z# Virtual registers */\n#define Z0  RAX\n#define Z1  RBX\n#define Z2  RCX\n#define Z3  RDX\n#define Z4  RSI\n#define Z5  RDI\n#define Z6  RBP\n#define Z7  R8\n#define Z8  R9\n#define Z9  R10\n#define Z10 R11\n#define Z11 R12\n#define Z12 R13\n#define Z13 R14\n#define Z14 R15\n#define Z15 RIP\n\n/* System call registers */\n#define Z_RC  RAX\n#define Z_R1 RDI\n#define Z_R2 RSI\n#define Z_R3 RDX\n#define Z_R4 R10\n#define Z_R5 R8\n#define Z_R6 R9\n\n#define Z_R(x) EVAL(HST(x))\n\n#define WINDOWS_SYSCALL_EXIT 0x0\n#define WINDOWS_SYSCALL_WRITE 0x0\n#define WINDOWS_SYSCALL_READ 0x0\n#define WINDOWS_SYSCALL_OPEN 0x0\n#define WINDOWS_SYSCALL_CLOSE 0x0\n#define WINDOWS_SYSCALL_FORK 0x0\n#define WINDOWS_SYSCALL_EXECVE 0x0\n#define WINDOWS_SYSCALL_WAIT4 0x0\n#define WINDOWS_SYSCALL_GETPID 0x0\n#define WINDOWS_SYSCALL_GETUID 0x0\n#define WINDOWS_SYSCALL_GETGID 0x0\n#define WINDOWS_SYSCALL_BRK 0x0\n#define WINDOWS_SYSCALL_MMAP 0x0\n#define WINDOWS_SYSCALL_MUNMAP 0x0\n#define WINDOWS_SYSCALL_CLONE 0x0\n\n#define APPLE_SYSCALL_EXIT 0x2000001\n#define APPLE_SYSCALL_WRITE 0x2000004\n#define APPLE_SYSCALL_READ 0x2000003\n#define APPLE_SYSCALL_OPEN 0x2000005\n#define APPLE_SYSCALL_CLOSE 0x2000006\n#define APPLE_SYSCALL_FORK 0x2000002\n#define APPLE_SYSCALL_EXECVE 0x200003b\n#define APPLE_SYSCALL_WAIT4 0x2000007\n#define APPLE_SYSCALL_GETPID 0x2000014\n#define APPLE_SYSCALL_GETUID 0x2000018\n#define APPLE_SYSCALL_GETGID 0x200001a\n#define APPLE_SYSCALL_BRK 0x2000034\n#define APPLE_SYSCALL_MMAP 0x20000c5\n#define APPLE_SYSCALL_MUNMAP 0x2000049\n#define APPLE_SYSCALL_CLONE 0x20000fa\n\n#define LINUX_SYSCALL_EXIT     0x3C\n#define LINUX_SYSCALL_WRITE    0x01\n#define LINUX_SYSCALL_READ     0x00\n#define LINUX_SYSCALL_OPEN     0x02\n#define LINUX_SYSCALL_CLOSE    0x03\n#define LINUX_SYSCALL_FORK     0x39\n#define LINUX_SYSCALL_EXECVE   0x3B\n#define LINUX_SYSCALL_WAIT4    0x3D\n#define LINUX_SYSCALL_GETPID   0x27\n#define LINUX_SYSCALL_GETUID   0x66\n#define LINUX_SYSCALL_GETGID   0x68\n#define LINUX_SYSCALL_BRK      0x0C\n#define LINUX_SYSCALL_MMAP     0x09\n#define LINUX_SYSCALL_MUNMAP   0x0B\n#define LINUX_SYSCALL_CLONE    0x38\n\n// ...\n// clang-format off\n\n#if defined __WIN32\n\t#define TARGET \"WINDOWS\"\n\t#define SYS WINDOWS\n\t#define SYS_CASE_WINDOWS(...) __VA_ARGS__\n#elif defined TARGET_OS_MAC\n\t#define TARGET \"APPLE\"\n\t#define SYS APPLE\n#elif defined TARGET_OS_IPHONE\n\t#define TARGET \"APPLE\"\n\t#define SYS APPLE\n#elif defined __linux__\n\t#define TARGET \"LINUX\"\n\t#define SYS LINUX\n#elif defined __unix__\n\t#define TARGET \"UNIX\"\n\t#define SYS UNIX\n#else\n\t#define TARGET \"UNKNOWN\"\n\t#define SYS \"UNKNOWN\"\n#endif\n\n#define SYSCALL_GET(x) CONCAT_2(EVAL(SYS), _SYSCALL_##x)\n\n#define SYS_SWITCH(...) __VA_ARGS__\n#define SYS_CASE(system, ...) \\\n\t\\\n _$ if system == SYS \\\n\\\n\t\tSYS_SWITCH(__VA_ARGS__) \\\n\\\n\t\\\n _$ endif \\\n\n\n# Allocate N bytes \u2192 result in %rax\n.macro MALLOC size\n\tSAVE_ZASM\n\tMOV (RAX, REF(SYS_GET(SYSCALL_MMAP))) ;// syscall number: mmap (Linux AArch64)\n\tMOV (RDI, REF(0))                     ;// addr = NULL\n\tMOV (RSI, REF(\\size))                 ;// length = size\n\tMOV (RDX, REF(3))                     ;// PROT_READ | PROT_WRITE\n\tMOV (R10, REF(0x22))                  ;// MAP_ANONYMOUS | MAP_PRIVATE\n\tMOV (R8, REF(-1))                     ;// fd = -1\n\tMOV (REF(0), R9)                      ;// offset = 0\n\tSYSCALL\n\tLOAD_ZASM\n.endm\n\n# Read value at pointer \u2192 %reg\n#   ptr = register with pointer\n#   reg = output register\n.macro PTR_READ ptr, reg\n    MOV ([\\ptr], \\reg)\n.endm\n\n# Write value to pointer\n#   value = register with value\n#   ptr = pointer register\n.macro PTR_WRITE value, ptr\n    MOV (\\value, [\\ptr])\n.endm\n\n# Store value in memory, and return a pointer to it\n#   value = register with value\n#   out = output register with pointer\n.macro PTR_CREATE value, size, out\n    SAVE_R0_R4\n    MALLOC \\size               ;// allocate bytes\n    MOV (\\value, [RAX])        ;// store value at allocated address\n    MOV (RAX, \\out)            ;// return pointer\n    LOAD_R0_R4\n.endm\n\n.macro LEN ptr, out\n\tSAVE_R0_R4\n\tMOV (\\ptr, RCX)\n1:\n\tMOV ([RCX], RDX)\n\tCMP (RDX, REF(0))\n\tJE (2f)\n\tINC (RCX)\n\tJMP (1b)\n2:\n\tMOV (RCX, \\out)\n\tLOAD_R0_R4\n.endm\n\n.macro FREE ptr, size\n\tSAVE\n\tMOV (REF(11), RAX)          ;// sys_munmap\n\tMOV (\\ptr, RDI)             ;// pointer\n\tMOV (REF(\\size), RSI)       ;// size in bytes\n\tSYSCALL\n\tLOAD\n.endm\n\n.macro DEBUG value\n\tMOV (RCX, REF(\\value))\n\tLEN \\value\n\tSUB (RDX, RCX)\n.endm\n\n\t.arch armv8-a\n\t.file\t\"pre_memory.hpp\"\n\t.text\n\t.align\t2\n\t.global\t_ZN6System9call_implEiz\n\t.type\t_ZN6System9call_implEiz, %function\n_ZN6System9call_implEiz:\n.LFB4:\n\t.cfi_startproc\n\tsub\tsp, sp, #304\n\t.cfi_def_cfa_offset 304\n\tstr\tw0, [sp, 12]\n\tstr\tx1, [sp, 248]\n\tstr\tx2, [sp, 256]\n\tstr\tx3, [sp, 264]\n\tstr\tx4, [sp, 272]\n\tstr\tx5, [sp, 280]\n\tstr\tx6, [sp, 288]\n\tstr\tx7, [sp, 296]\n\tstr\tq0, [sp, 112]\n\tstr\tq1, [sp, 128]\n\tstr\tq2, [sp, 144]\n\tstr\tq3, [sp, 160]\n\tstr\tq4, [sp, 176]\n\tstr\tq5, [sp, 192]\n\tstr\tq6, [sp, 208]\n\tstr\tq7, [sp, 224]\n\tadrp\tx0, :got:__stack_chk_guard;ldr\tx0, [x0, :got_lo12:__stack_chk_guard]\n\tldr\tx1, [x0]\n\tstr\tx1, [sp, 104]\n\tmov\tx1, 0\n\tadd\tx0, sp, 304\n\tstr\tx0, [sp, 72]\n\tadd\tx0, sp, 304\n\tstr\tx0, [sp, 80]\n\tadd\tx0, sp, 240\n\tstr\tx0, [sp, 88]\n\tmov\tw0, -56\n\tstr\tw0, [sp, 96]\n\tmov\tw0, -128\n\tstr\tw0, [sp, 100]\n\tldr\tw1, [sp, 96]\n\tldr\tx0, [sp, 72]\n\tcmp\tw1, 0\n\tblt\t.L2\n\tadd\tx1, x0, 15\n\tand\tx1, x1, -8\n\tstr\tx1, [sp, 72]\n\tb\t.L3\n.L2:\n\tadd\tw2, w1, 8\n\tstr\tw2, [sp, 96]\n\tldr\tw2, [sp, 96]\n\tcmp\tw2, 0\n\tble\t.L4\n\tadd\tx1, x0, 15\n\tand\tx1, x1, -8\n\tstr\tx1, [sp, 72]\n\tb\t.L3\n.L4:\n\tldr\tx2, [sp, 80]\n\tsxtw\tx0, w1\n\tadd\tx0, x2, x0\n.L3:\n\tldr\tx0, [x0]\n\tstr\tx0, [sp, 16]\n\tldr\tw1, [sp, 96]\n\tldr\tx0, [sp, 72]\n\tcmp\tw1, 0\n\tblt\t.L6\n\tadd\tx1, x0, 15\n\tand\tx1, x1, -8\n\tstr\tx1, [sp, 72]\n\tb\t.L7\n.L6:\n\tadd\tw2, w1, 8\n\tstr\tw2, [sp, 96]\n\tldr\tw2, [sp, 96]\n\tcmp\tw2, 0\n\tble\t.L8\n\tadd\tx1, x0, 15\n\tand\tx1, x1, -8\n\tstr\tx1, [sp, 72]\n\tb\t.L7\n.L8:\n\tldr\tx2, [sp, 80]\n\tsxtw\tx0, w1\n\tadd\tx0, x2, x0\n.L7:\n\tldr\tx0, [x0]\n\tstr\tx0, [sp, 24]\n\tldr\tw1, [sp, 96]\n\tldr\tx0, [sp, 72]\n\tcmp\tw1, 0\n\tblt\t.L10\n\tadd\tx1, x0, 15\n\tand\tx1, x1, -8\n\tstr\tx1, [sp, 72]\n\tb\t.L11\n.L10:\n\tadd\tw2, w1, 8\n\tstr\tw2, [sp, 96]\n\tldr\tw2, [sp, 96]\n\tcmp\tw2, 0\n\tble\t.L12\n\tadd\tx1, x0, 15\n\tand\tx1, x1, -8\n\tstr\tx1, [sp, 72]\n\tb\t.L11\n.L12:\n\tldr\tx2, [sp, 80]\n\tsxtw\tx0, w1\n\tadd\tx0, x2, x0\n.L11:\n\tldr\tx0, [x0]\n\tstr\tx0, [sp, 32]\n\tldr\tw1, [sp, 96]\n\tldr\tx0, [sp, 72]\n\tcmp\tw1, 0\n\tblt\t.L14\n\tadd\tx1, x0, 15\n\tand\tx1, x1, -8\n\tstr\tx1, [sp, 72]\n\tb\t.L15\n.L14:\n\tadd\tw2, w1, 8\n\tstr\tw2, [sp, 96]\n\tldr\tw2, [sp, 96]\n\tcmp\tw2, 0\n\tble\t.L16\n\tadd\tx1, x0, 15\n\tand\tx1, x1, -8\n\tstr\tx1, [sp, 72]\n\tb\t.L15\n.L16:\n\tldr\tx2, [sp, 80]\n\tsxtw\tx0, w1\n\tadd\tx0, x2, x0\n.L15:\n\tldr\tx0, [x0]\n\tstr\tx0, [sp, 40]\n\tldr\tw1, [sp, 96]\n\tldr\tx0, [sp, 72]\n\tcmp\tw1, 0\n\tblt\t.L18\n\tadd\tx1, x0, 15\n\tand\tx1, x1, -8\n\tstr\tx1, [sp, 72]\n\tb\t.L19\n.L18:\n\tadd\tw2, w1, 8\n\tstr\tw2, [sp, 96]\n\tldr\tw2, [sp, 96]\n\tcmp\tw2, 0\n\tble\t.L20\n\tadd\tx1, x0, 15\n\tand\tx1, x1, -8\n\tstr\tx1, [sp, 72]\n\tb\t.L19\n.L20:\n\tldr\tx2, [sp, 80]\n\tsxtw\tx0, w1\n\tadd\tx0, x2, x0\n.L19:\n\tldr\tx0, [x0]\n\tstr\tx0, [sp, 48]\n\tldr\tw1, [sp, 96]\n\tldr\tx0, [sp, 72]\n\tcmp\tw1, 0\n\tblt\t.L22\n\tadd\tx1, x0, 15\n\tand\tx1, x1, -8\n\tstr\tx1, [sp, 72]\n\tb\t.L23\n.L22:\n\tadd\tw2, w1, 8\n\tstr\tw2, [sp, 96]\n\tldr\tw2, [sp, 96]\n\tcmp\tw2, 0\n\tble\t.L24\n\tadd\tx1, x0, 15\n\tand\tx1, x1, -8\n\tstr\tx1, [sp, 72]\n\tb\t.L23\n.L24:\n\tldr\tx2, [sp, 80]\n\tsxtw\tx0, w1\n\tadd\tx0, x2, x0\n.L23:\n\tldr\tx0, [x0]\n\tstr\tx0, [sp, 56]\n\tldrsw\tx1, [sp, 12]\n\tldr\tx2, [sp, 16]\n\tldr\tx6, [sp, 24]\n\tldr\tx7, [sp, 32]\n\tldr\tx11, [sp, 40]\n\tldr\tx12, [sp, 48]\n\tldr\tx13, [sp, 56]\n#APP\n// 83 \"dist/compiled/pre_memory.hpp\" 1\n\tmov x1, %rax\nmov x2, %rdi\nmov x6, %rsi\nmov x7, %rdx\nmov x11, %r10\nmov x12, %r8\nmov x13, %r9\nsyscall\nmov %rax, x1\n\n// 0 \"\" 2\n#NO_APP\n\tstr\tx1, [sp, 64]\n\tbrk #1000\n\t.cfi_endproc\n.LFE4:\n\t.size\t_ZN6System9call_implEiz, .-_ZN6System9call_implEiz\n\t.align\t2\n\t.global\t_ZN6Memory8allocateEv\n\t.type\t_ZN6Memory8allocateEv, %function\n_ZN6Memory8allocateEv:\n.LFB5:\n\t.cfi_startproc\n#APP\n// 105 \"dist/compiled/pre_memory.hpp\" 1\n\tmov rdi, r8\ncall allocate_impl\nmov rbp, rax\nret\n\n// 0 \"\" 2\n#NO_APP\n\tbrk #1000\n\t.cfi_endproc\n.LFE5:\n\t.size\t_ZN6Memory8allocateEv, .-_ZN6Memory8allocateEv\n\t.align\t2\n\t.global\t_ZN6Memory13allocate_implEi\n\t.type\t_ZN6Memory13allocate_implEi, %function\n_ZN6Memory13allocate_implEi:\n.LFB6:\n\t.cfi_startproc\n\tstp\tx29, x30, [sp, -32]!\n\t.cfi_def_cfa_offset 32\n\t.cfi_offset 29, -32\n\t.cfi_offset 30, -24\n\tmov\tx29, sp\n\tstr\tw0, [sp, 28]\n\tldr\tw1, [sp, 28]\n\tmov\tw0, 9\n\tbl\t_ZN6System9call_implEiz\n\tbrk #1000\n\t.cfi_endproc\n.LFE6:\n\t.size\t_ZN6Memory13allocate_implEi, .-_ZN6Memory13allocate_implEi\n\t.ident\t\"GCC: (Ubuntu 14.3.0-1ubuntu1) 14.3.0\"\n\t.section\t.note.GNU-stack,\"\",@progbits\n\n# Usage: \n# STRUCT name\n#   STRUCT_FIELD field_name, size\n# STRUCT_END\n\n.set STRUCT_OFFSET, 0\n\n.macro STRUCT name\n\t.set \\name\\()_SIZE, 0\n\t.pushsection .data\n\\name:\n.endm\n\n.macro STRUCT_FIELD name, size\n\\name:\n\t.skip \\size\n\t.set STRUCT_OFFSET, STRUCT_OFFSET + \\size\n.endm\n\n.macro STRUCT_END\n\t.popsection\n\t.set STRUCT_SIZE, STRUCT_OFFSET\n\t.set STRUCT_OFFSET, 0\n.endm\n\n.macro ALIGN boundary\n\t.balign \\boundary\n.endm\n\n.macro VAR id, value, out\n\t;// TODO\n.endm\n\n.macro FUNC name, _\n\t.section .text\n\t.global \\name\n\\name:\n.endm\n\n.macro PARAM type, name\n\t# Store param info\n\t.quad 0x10\n\t.asciz \"\\name\"\n\t.quad \\type\n.endm\n\n.macro PARAMS_END\n\t.quad 0x11\n.endm\n\n.macro FUNC_END\n\t.quad 0xFF\n.endm\n\n.macro RETURN value\n\tMOV (Z6, \\value)\n.endm\n\n\t.arch armv8-a\n\t.file\t\"pre_memory.hpp\"\n\t.text\n\t.align\t2\n\t.global\t_ZN6System9call_implEiz\n\t.type\t_ZN6System9call_implEiz, %function\n_ZN6System9call_implEiz:\n.LFB4:\n\t.cfi_startproc\n\tsub\tsp, sp, #304\n\t.cfi_def_cfa_offset 304\n\tstr\tw0, [sp, 12]\n\tstr\tx1, [sp, 248]\n\tstr\tx2, [sp, 256]\n\tstr\tx3, [sp, 264]\n\tstr\tx4, [sp, 272]\n\tstr\tx5, [sp, 280]\n\tstr\tx6, [sp, 288]\n\tstr\tx7, [sp, 296]\n\tstr\tq0, [sp, 112]\n\tstr\tq1, [sp, 128]\n\tstr\tq2, [sp, 144]\n\tstr\tq3, [sp, 160]\n\tstr\tq4, [sp, 176]\n\tstr\tq5, [sp, 192]\n\tstr\tq6, [sp, 208]\n\tstr\tq7, [sp, 224]\n\tadrp\tx0, :got:__stack_chk_guard;ldr\tx0, [x0, :got_lo12:__stack_chk_guard]\n\tldr\tx1, [x0]\n\tstr\tx1, [sp, 104]\n\tmov\tx1, 0\n\tadd\tx0, sp, 304\n\tstr\tx0, [sp, 72]\n\tadd\tx0, sp, 304\n\tstr\tx0, [sp, 80]\n\tadd\tx0, sp, 240\n\tstr\tx0, [sp, 88]\n\tmov\tw0, -56\n\tstr\tw0, [sp, 96]\n\tmov\tw0, -128\n\tstr\tw0, [sp, 100]\n\tldr\tw1, [sp, 96]\n\tldr\tx0, [sp, 72]\n\tcmp\tw1, 0\n\tblt\t.L2\n\tadd\tx1, x0, 15\n\tand\tx1, x1, -8\n\tstr\tx1, [sp, 72]\n\tb\t.L3\n.L2:\n\tadd\tw2, w1, 8\n\tstr\tw2, [sp, 96]\n\tldr\tw2, [sp, 96]\n\tcmp\tw2, 0\n\tble\t.L4\n\tadd\tx1, x0, 15\n\tand\tx1, x1, -8\n\tstr\tx1, [sp, 72]\n\tb\t.L3\n.L4:\n\tldr\tx2, [sp, 80]\n\tsxtw\tx0, w1\n\tadd\tx0, x2, x0\n.L3:\n\tldr\tx0, [x0]\n\tstr\tx0, [sp, 16]\n\tldr\tw1, [sp, 96]\n\tldr\tx0, [sp, 72]\n\tcmp\tw1, 0\n\tblt\t.L6\n\tadd\tx1, x0, 15\n\tand\tx1, x1, -8\n\tstr\tx1, [sp, 72]\n\tb\t.L7\n.L6:\n\tadd\tw2, w1, 8\n\tstr\tw2, [sp, 96]\n\tldr\tw2, [sp, 96]\n\tcmp\tw2, 0\n\tble\t.L8\n\tadd\tx1, x0, 15\n\tand\tx1, x1, -8\n\tstr\tx1, [sp, 72]\n\tb\t.L7\n.L8:\n\tldr\tx2, [sp, 80]\n\tsxtw\tx0, w1\n\tadd\tx0, x2, x0\n.L7:\n\tldr\tx0, [x0]\n\tstr\tx0, [sp, 24]\n\tldr\tw1, [sp, 96]\n\tldr\tx0, [sp, 72]\n\tcmp\tw1, 0\n\tblt\t.L10\n\tadd\tx1, x0, 15\n\tand\tx1, x1, -8\n\tstr\tx1, [sp, 72]\n\tb\t.L11\n.L10:\n\tadd\tw2, w1, 8\n\tstr\tw2, [sp, 96]\n\tldr\tw2, [sp, 96]\n\tcmp\tw2, 0\n\tble\t.L12\n\tadd\tx1, x0, 15\n\tand\tx1, x1, -8\n\tstr\tx1, [sp, 72]\n\tb\t.L11\n.L12:\n\tldr\tx2, [sp, 80]\n\tsxtw\tx0, w1\n\tadd\tx0, x2, x0\n.L11:\n\tldr\tx0, [x0]\n\tstr\tx0, [sp, 32]\n\tldr\tw1, [sp, 96]\n\tldr\tx0, [sp, 72]\n\tcmp\tw1, 0\n\tblt\t.L14\n\tadd\tx1, x0, 15\n\tand\tx1, x1, -8\n\tstr\tx1, [sp, 72]\n\tb\t.L15\n.L14:\n\tadd\tw2, w1, 8\n\tstr\tw2, [sp, 96]\n\tldr\tw2, [sp, 96]\n\tcmp\tw2, 0\n\tble\t.L16\n\tadd\tx1, x0, 15\n\tand\tx1, x1, -8\n\tstr\tx1, [sp, 72]\n\tb\t.L15\n.L16:\n\tldr\tx2, [sp, 80]\n\tsxtw\tx0, w1\n\tadd\tx0, x2, x0\n.L15:\n\tldr\tx0, [x0]\n\tstr\tx0, [sp, 40]\n\tldr\tw1, [sp, 96]\n\tldr\tx0, [sp, 72]\n\tcmp\tw1, 0\n\tblt\t.L18\n\tadd\tx1, x0, 15\n\tand\tx1, x1, -8\n\tstr\tx1, [sp, 72]\n\tb\t.L19\n.L18:\n\tadd\tw2, w1, 8\n\tstr\tw2, [sp, 96]\n\tldr\tw2, [sp, 96]\n\tcmp\tw2, 0\n\tble\t.L20\n\tadd\tx1, x0, 15\n\tand\tx1, x1, -8\n\tstr\tx1, [sp, 72]\n\tb\t.L19\n.L20:\n\tldr\tx2, [sp, 80]\n\tsxtw\tx0, w1\n\tadd\tx0, x2, x0\n.L19:\n\tldr\tx0, [x0]\n\tstr\tx0, [sp, 48]\n\tldr\tw1, [sp, 96]\n\tldr\tx0, [sp, 72]\n\tcmp\tw1, 0\n\tblt\t.L22\n\tadd\tx1, x0, 15\n\tand\tx1, x1, -8\n\tstr\tx1, [sp, 72]\n\tb\t.L23\n.L22:\n\tadd\tw2, w1, 8\n\tstr\tw2, [sp, 96]\n\tldr\tw2, [sp, 96]\n\tcmp\tw2, 0\n\tble\t.L24\n\tadd\tx1, x0, 15\n\tand\tx1, x1, -8\n\tstr\tx1, [sp, 72]\n\tb\t.L23\n.L24:\n\tldr\tx2, [sp, 80]\n\tsxtw\tx0, w1\n\tadd\tx0, x2, x0\n.L23:\n\tldr\tx0, [x0]\n\tstr\tx0, [sp, 56]\n\tldrsw\tx1, [sp, 12]\n\tldr\tx2, [sp, 16]\n\tldr\tx6, [sp, 24]\n\tldr\tx7, [sp, 32]\n\tldr\tx11, [sp, 40]\n\tldr\tx12, [sp, 48]\n\tldr\tx13, [sp, 56]\n#APP\n// 83 \"dist/compiled/pre_memory.hpp\" 1\n\tmov x1, %rax\nmov x2, %rdi\nmov x6, %rsi\nmov x7, %rdx\nmov x11, %r10\nmov x12, %r8\nmov x13, %r9\nsyscall\nmov %rax, x1\n\n// 0 \"\" 2\n#NO_APP\n\tstr\tx1, [sp, 64]\n\tbrk #1000\n\t.cfi_endproc\n.LFE4:\n\t.size\t_ZN6System9call_implEiz, .-_ZN6System9call_implEiz\n\t.align\t2\n\t.global\t_ZN6Memory8allocateEv\n\t.type\t_ZN6Memory8allocateEv, %function\n_ZN6Memory8allocateEv:\n.LFB5:\n\t.cfi_startproc\n#APP\n// 105 \"dist/compiled/pre_memory.hpp\" 1\n\tmov rdi, r8\ncall allocate_impl\nmov rbp, rax\nret\n\n// 0 \"\" 2\n#NO_APP\n\tbrk #1000\n\t.cfi_endproc\n.LFE5:\n\t.size\t_ZN6Memory8allocateEv, .-_ZN6Memory8allocateEv\n\t.align\t2\n\t.global\t_ZN6Memory13allocate_implEi\n\t.type\t_ZN6Memory13allocate_implEi, %function\n_ZN6Memory13allocate_implEi:\n.LFB6:\n\t.cfi_startproc\n\tstp\tx29, x30, [sp, -32]!\n\t.cfi_def_cfa_offset 32\n\t.cfi_offset 29, -32\n\t.cfi_offset 30, -24\n\tmov\tx29, sp\n\tstr\tw0, [sp, 28]\n\tldr\tw1, [sp, 28]\n\tmov\tw0, 9\n\tbl\t_ZN6System9call_implEiz\n\tbrk #1000\n\t.cfi_endproc\n.LFE6:\n\t.size\t_ZN6Memory13allocate_implEi, .-_ZN6Memory13allocate_implEi\n\t.ident\t\"GCC: (Ubuntu 14.3.0-1ubuntu1) 14.3.0\"\n\t.section\t.note.GNU-stack,\"\",@progbits\n\n# Type initialization\n.macro TYPE name\n\tSTRUCT \\name\n.endm\n\n.macro TYPE_FIELD type, name\n\t#if type == BYTE\n\t\tSTRUCT_FIELD \\name\n\t#endif\n.endm\n\n.macro TYPE_END\n\tSTRUCT_END\n.endm\n\n.macro SCOPE name\n\t\n.endm\n\n.macro SCOPE_SET name, value\n\t\n.endm\n\n.section .text\n.global _start\n_start:\n\t\n\n// clang-format off\n";
export default _default;
